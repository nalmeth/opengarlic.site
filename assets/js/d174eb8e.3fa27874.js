"use strict";(self.webpackChunkopengarlic_site=self.webpackChunkopengarlic_site||[]).push([[7767],{6503:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"Tutorial/Components/modes","title":"Modes","description":"- The main logic of the game mode should go here.","source":"@site/docs/Tutorial/Components/modes.md","sourceDirName":"Tutorial/Components","slug":"/Tutorial/Components/modes","permalink":"/docs/Tutorial/Components/modes","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Components","permalink":"/docs/category/components"},"next":{"title":"Screens","permalink":"/docs/Tutorial/Components/screens"}}');var s=n(4848),a=n(8453);const r={},i="Modes",l={},c=[{value:"Example Mode",id:"example-mode",level:2},{value:"Mode settings",id:"mode-settings",level:2},{value:"Settings Structure",id:"settings-structure",level:2},{value:"Example Settings",id:"example-settings",level:2},{value:"API",id:"api",level:2}];function m(t){const e={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"modes",children:"Modes"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"The main logic of the game mode should go here."}),"\n",(0,s.jsxs)(e.li,{children:["Stored in ",(0,s.jsx)(e.em,{children:"client/src/components/games"})]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"example-mode",children:"Example Mode"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-jsx",metastring:'title="client/src/components/games/MyGameMode.js"',children:"/**\n * MyGameMode Component\n */\nconst MyGameMode = (props) => {\n\n    /**\n     * Game Logic Here\n     */\n\n\t// Default events you need to implement\n\tconst events = {\n\t\tPlayersDone: (lobby, lobbyData) => {\n\t\t\t// Handle when all players are done\n\n\t\t\t// Prepare lobby data structure how you want\n\t\t\tconst newData = {\n\t\t\t\t...lobbyData,\n\t\t\t\t// new data here\n\t\t\t};\n\n\t\t\t// Message server to move to the next screen\n\t\t\tsocket.emit('message', {\n\t\t\t\ttype: 'NextScreen',\n\t\t\t\tdata: {\n\t\t\t\t\tlobbyCode: lobby.code,\n\t\t\t\t\tlobbyData: newData\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tNextScreen: (lobby) => {\n\t\t\t// Handle when the game moves to the next screen\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\t// Attach the events to the web socket\n\t\tfor(const name in events) {\n\t\t\tsocket.on(name, events[name]);\n\t\t}\n\n\t\t// Detach the events from the web socket\n\t\treturn () => {\n\t\t\tfor(const name in events) {\n\t\t\t\tsocket.off(name, events[name]);\n\t\t\t}\n\t\t}\n\t}, []);\n\n    return (\n        <>\n        {props.gameScreen === 0 && <Screen0 {...props} />}\n        {props.gameScreen === 1 && <Screen1 {...props} />}\n        </>\n    )\n}\n\nexport default MyGameMode;\n\n/**\n * Component config and settings\n */\nexport const title = 'MyGameMode';\nexport const description = 'My mode plays like this...';\nexport const settings = {\n    // See below\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"mode-settings",children:"Mode settings"}),"\n",(0,s.jsx)(e.p,{children:"You may add any settings you need, but there are a few pre-defined you should implement:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"maxPlayers"}),": The maximum number of players allowed in the lobby"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"groupSize"}),": If the game requires multiples of players (ex. player count divisible by 3)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"time"}),": The seconds allowed for each game screen"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"settings-structure",children:"Settings Structure"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"{\n\tname:string\t\t\t\t\t\t\t// Storage key (lobby.settings.name)\n\n\tdisplayName:string\t\t\t\t\t// Name to display in settings dialog\n\n\tdefault:mixed\t\t\t\t\t\t// The default value, this should match the intitial value\n\t\t\t\t\t\t\t\t\t\t// This value changes temporarily when adjusting the settings\n\n\tcomponent:function(newProps:object)\t// Function that returns a JSX.Element for adjusting the value\n\t\t\t\t\t\t\t\t\t\t// in the settings dialog. New props passed are:\n\t\t\t\t\t\t\t\t\t\t// initialValue:number\t\tUpdated value from settings dialog\n\t\t\t\t\t\t\t\t\t\t// onUpdate:function(value)\tUsed to hook value updates from component\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"example-settings",children:"Example Settings"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"export const settings = [\n\t{\n\t\tname: 'maxPlayers',\n\t\tdisplayName: 'Max Players',\n\t\tdefault: 15,\n\t\tcomponent: (newProps) => {\n\t\t\tlet props = {\n\t\t\t\tinitialValue: 15,\n\t\t\t\tminValue: 1,\n\t\t\t\tmaxValue: 15,\n\t\t\t\trequired: true\n\t\t\t}\n\t\t\tprops = {...props, ...newProps};\n\t\t\treturn <GameNumericInput {...props} />\n\t\t}\n\t},\n\t{\n\t\tname: 'groupSize',\n\t\tdisplayName: 'Group Size',\n\t\tdefault: 1,\n\t\tcomponent: (newProps) => {\n\t\t\tlet props = {\n\t\t\t\tinitialValue: 1,\n\t\t\t\tminValue: 1,\n\t\t\t\tmaxValue: 7,\n\t\t\t\trequired: true\n\t\t\t}\n\t\t\tprops = {...props, ...newProps};\n\t\t\treturn <GameNumericInput {...props} />\n\t\t}\n\t},\n\t{\n\t\tname: 'timer',\n\t\tdisplayName: 'Timer',\n\t\tdefault: 0,\n\t\tcomponent: (newProps) => {\n\t\t\tlet props = {\n\t\t\t\tinitialValue: 0,\n\t\t\t\tminValue: 0,\n\t\t\t\trequired: true\n\t\t\t}\n\t\t\tprops = {...props, ...newProps};\n\t\t\treturn <GameNumericInput {...props} />\n\t\t}\n\t}\n];\n"})}),"\n",(0,s.jsx)(e.h2,{id:"api",children:"API"}),"\n",(0,s.jsx)(e.p,{children:"Game Mode Components receive the following props."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"// Game Lobby properties\n{\ncode:string,           // The lobby code\n\nowner:string,          // Name of the player that owns the lobby\n\nstatus:string,         // LobbyStatus Constants:\n                       // OPEN - Players are in the lobby waiting for game to start\n                       // STARTED - The game has been started. No new players allowed.\n                       // GAME - The game has ended\n\nappScreen:string,      // AppScreen Constants:\n                       // LOGIN - The login screen\n                       // LOBBY - The lobby screen\n                       // GAME  - This screen is what shows while a game is being played.\n\ngameScreen:number,     // Automatically increments by 1 for each game screen.\n                       // (So you can track what screen to show)\n\nround:number,          // Automatically increments by 1 for each round of the game.\n                       // Currently Not implemented\n\nmode:string,           // The title of the game mode. This is set in your game component.\n\nsettings:object,       // This is the json object of options available to your game mode.\n                       // You must configure the predefined settings. You may add any others you want.\n                       // Predefined settings:\n                       // maxPlayers:number   - The maximum number of players allowed.\n                       // groupSize:number    - Required group amount.\n                       //                        (Groups of 2: 2, Groups of 3: 3, etc.)\n                       //                        (This is not currently implemented)\n                       // time:number         - Per game screen timer in seconds.\n                       //                        (0 = infinite)\n                       //                        (This is not currently implemented)\n\nplayers:Array<object>, // List of players in the game and their info\n                       // Each player has the following properties\n                       // name:string      - The name of the player\n                       // owner:boolean    - Flag of lobby ownership\n                       // status:string    - PlayerStatus Constant\n                       //                    ACTIVE        - Player is ready\n                       //                    DONE          - Player has pressed done\n                       // connected:string - ConnectionStatus Constant\n                       //                    CONNECTED     - Player is connected\n                       //                    DISCONNECTED  - Player is disconnected\n\n// Other properties\nsocket:object,          // The websocket to emit/listen for custom events\nplayerName:string,      // Name of the the player\n\nlobbyData:object,       // Json data store that can be used to store images, text, etc\n                        // Formatting is completely up to the game mode\n\nonGameEnd:function,     // Callback to fire when you want the game to end\n\nonRoundEnd:function,     // Callback to fire when you want the round to end (Not yet implemented)\n\nonDone:function(data:object),    // Callback to fire when you want to mark a player as done\n                                 // data:object    - Data to save in the lobbyData storage\n\nonQuit:function(),       // Callback to fire when a player quits the lobby\n}\n"})})]})}function d(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(m,{...t})}):m(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>r,x:()=>i});var o=n(6540);const s={},a=o.createContext(s);function r(t){const e=o.useContext(a);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:r(t.components),o.createElement(a.Provider,{value:e},t.children)}}}]);